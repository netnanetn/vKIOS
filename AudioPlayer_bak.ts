import Sound from 'react-native-sound';
import { name as appName } from './app.json';

// C·∫•u h√¨nh √¢m thanh
Sound.setCategory('Playback');

// Mapping t·ª´ t·ª´ ti·∫øng Vi·ªát sang t√™n file .mp3
const wordToFileMap: { [key: string]: string } = {
  'moiso': 'moiso',
  'm·ªôt': 'mot',
  'hai': 'hai',
  'ba': 'ba',
  'b·ªën': 'bon',
  'nƒÉm': 'nam',
  's√°u': 'sau',
  'b·∫£y': 'bay',
  't√°m': 'tam',
  'ch√≠n': 'chin',
  'kh√¥ng': 'khong',
  'denbanso': 'denbanso',
};

// Chu·∫©n h√≥a chu·ªói nh·∫≠p: g·ªôp c·ª•m t·ª´ n·∫øu c·∫ßn
const normalizeInput = (text: string): string => {
  return text
    .toLowerCase()
    .replace(/ƒë·∫øn b√†n s·ªë/g, 'denbanso')
    .replace(/m·ªùi s·ªë/g, 'moiso')
    .replace(/[^\p{L}\s]/gu, ''); // lo·∫°i b·ªè d·∫•u c√¢u
};

// T√°ch t·ª´ ‚Üí danh s√°ch t√™n file √¢m thanh
const textToAudioFiles = (input: string): string[] => {
  const cleaned = normalizeInput(input);
  return cleaned
    .split(' ')
    .map((word) => wordToFileMap[word] || word)
    .filter(Boolean); // lo·∫°i undefined/r·ªóng
};

 
const isNumberWord = (word: string): boolean => {
  return ['kh√¥ng', 'm·ªôt', 'hai', 'ba', 'b·ªën', 'nƒÉm', 's√°u', 'b·∫£y', 't√°m', 'ch√≠n'].includes(word);
};
type AudioChunk = {
  type: 'normal' | 'fast';
  files: string[];
};

const groupAudioFiles = (input: string): AudioChunk[] => {
  const normalized = input
    .toLowerCase()
     .replace(/ƒë·∫øn b√†n s·ªë/g, 'denbanso')
    .replace(/m·ªùi s·ªë/g, 'moiso')
    .replace(/[^\p{L}\s]/gu, '')
    .split(' ');

  const chunks: AudioChunk[] = [];
  let currentChunk: AudioChunk | null = null;

  for (const word of normalized) {
    const file = wordToFileMap[word];
    if (!file) continue;

    const type = isNumberWord(word) ? 'fast' : 'normal';

    if (!currentChunk || currentChunk.type !== type) {
      currentChunk = { type, files: [] };
      chunks.push(currentChunk);
    }

    currentChunk.files.push(file);
  }

  return chunks;
};
// Ph√°t to√†n b·ªô c√°c chunk
const playSequenceWithSpeedControl = async (chunks: AudioChunk[]): Promise<void> => {
  for (const chunk of chunks) {
    await playChunk(chunk);
  }
};
const testSound = () => {
    Sound.setCategory('Playback');
  const filename = 'mot.mp3';
  const sound = new Sound(`${filename}`, Sound.MAIN_BUNDLE, (error) => {
    if (error) {
        console.log('Sound.MAIN_BUNDLE', Sound.MAIN_BUNDLE);
      console.log('‚ùå L·ªói m·ªü file:', filename);
      console.log('Chi ti·∫øt l·ªói:', error);
      return;
    }
    console.log('‚úÖ ƒê√£ load file:', filename);
    sound.play((success) => {
      if (success) {
        console.log('üîä Ph√°t th√†nh c√¥ng');
      } else {
        console.log('‚ùå Ph√°t th·∫•t b·∫°i');
      }
      sound.release();
    });
  });
};
// Ph√°t t·ª´ng file √¢m thanh trong chunk, theo t·ªëc ƒë·ªô
const playChunk = async (chunk: AudioChunk): Promise<void> => {
     
testSound();
return;
  for (const filename of chunk.files) {
    await new Promise<void>((resolve) => {

    console.log('doc file mp3', `sounds/${filename}.mp3`);
      const sound = new Sound(`sounds/${filename}.mp3`, Sound.MAIN_BUNDLE, (error) => {
        if (error) {
          console.log('L·ªói m·ªü file:', filename);
          console.log('‚ùå Chi ti·∫øt l·ªói:', JSON.stringify(error));
          resolve(); // B·ªè qua l·ªói
          return;
        }

        sound.play((success) => {
          sound.release();
          if (!success) {
            console.log('L·ªói ph√°t:', filename);
          }

          // Kh√¥ng delay n·∫øu l√† fast
          const delay = chunk.type === 'fast' ? 0 : 100;
          setTimeout(resolve, delay);
        });
      });
    });
  }
};
const playSequence = (filenames: string[]) => {
  const playNext = (index: number) => {
    if (index >= filenames.length) return;
const packageName = 'com.intest'; // ‚ö†Ô∏è thay b·∫±ng package name c·ªßa b·∫°n
    const path = `android.resource://${packageName}/raw/${filenames[index]}`;
    const sound = new Sound(`sounds/${filenames[index]}.mp3`, Sound.MAIN_BUNDLE, (error) => {
      if (error) {
        console.log('L·ªói khi m·ªü file:', filenames[index], error);
        return;
      }

      // Ph√°t file .mp3
      sound.play((success) => {
        sound.release();
        if (success) {
          // G·ªåI NGAY file k·∫ø ti·∫øp ‚Äî kh√¥ng c·∫ßn delay
          playNext(index + 1);
        } else {
          console.log('Ph√°t l·ªói:', filenames[index]);
        }
      });
    });
  };

  playNext(0);
};
 
export const speakTextSmart = async (input: string): Promise<void> => {
  const chunks = groupAudioFiles(input);
  console.log('chunks', chunks);
  await playSequenceWithSpeedControl(chunks);
};
// H√†m ch√≠nh ƒë·ªÉ g·ªçi t·ª´ app
export const speakText = (input: string) => {
  const files = textToAudioFiles(input);
  console.log('Danh s√°ch file:', files); // debug
  playSequence(files);
};
